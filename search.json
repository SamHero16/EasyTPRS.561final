[{"path":"https://samhero16.github.io/EasyTPRS.561final/articles/user_guide.html","id":"using-easytprs","dir":"Articles","previous_headings":"","what":"Using EasyTPRS","title":"User Guide","text":"package designed make created Thin Plate Regression Splines easy. essentially provide wrapper ‘mgcv’ ‘spectralGP’ help creating visualizing TPRS. TPRS method controlling unmeasures spatial confounding. essentially add however many basis splines want spatial regression, hopefully absorb unseen confounding, isolating true effect. example using TPRS regression: can see can used correct confounding bring beta estimate x closer truth can see, true b1 1, confounder gives us overestimate. n can see estimate gets better (closer one).","code":"library(EasyTPRS.561final) set.seed(20) size = 128 gp=EasyTPRS.561final::simulate_gp(size, .5, plot = F) ## Note that the spatial range parameter is interpreted based ## on the process living on a (0,1)^d grid confounder=EasyTPRS.561final::simulate_gp(size, .5, plot = F) ## Note that the spatial range parameter is interpreted based ## on the process living on a (0,1)^d grid x = gp$process + .4*confounder$process y = x + rnorm(size**2, mean = 0, sd = 1) +  .4*confounder$process lm(y~x) ##  ## Call: ## lm(formula = y ~ x) ##  ## Coefficients: ## (Intercept)            x   ##    -0.08992      1.20891 tprs_obj = EasyTPRS.561final::create_n_2D_TPRS(size, n = 20) ## Note that the spatial range parameter is interpreted based ## on the process living on a (0,1)^d grid basis_splines = data.matrix(tprs_obj$TPRS) summary(lm(y~x + basis_splines)) ##  ## Call: ## lm(formula = y ~ x + basis_splines) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -4.0773 -0.6798 -0.0019  0.6931  3.7574  ##  ## Coefficients: ##                   Estimate Std. Error t value Pr(>|t|)     ## (Intercept)      -0.666381   0.543566  -1.226  0.22024     ## x                 1.194363   0.020858  57.261  < 2e-16 *** ## basis_splinesX20 -0.034012   0.035998  -0.945  0.34475     ## basis_splinesX21 -0.003526   0.033413  -0.106  0.91595     ## basis_splinesX1   0.354005   0.609378   0.581  0.56130     ## basis_splinesX2  -0.068257   0.008469  -8.059 8.20e-16 *** ## basis_splinesX3  -0.074112   0.008249  -8.984  < 2e-16 *** ## basis_splinesX4  -0.017387   0.023611  -0.736  0.46151     ## basis_splinesX5  -0.157859   0.017743  -8.897  < 2e-16 *** ## basis_splinesX6  -0.001974   0.019827  -0.100  0.92071     ## basis_splinesX7  -0.009613   0.020066  -0.479  0.63189     ## basis_splinesX8   0.049151   0.042675   1.152  0.24944     ## basis_splinesX9  -0.035248   0.008036  -4.386 1.16e-05 *** ## basis_splinesX10 -0.080366   0.008283  -9.703  < 2e-16 *** ## basis_splinesX11 -0.043128   0.031006  -1.391  0.16425     ## basis_splinesX12  0.034100   0.011067   3.081  0.00206 **  ## basis_splinesX13  0.044644   0.022408   1.992  0.04635 *   ## basis_splinesX14  0.181355   0.020709   8.757  < 2e-16 *** ## basis_splinesX15  0.002791   0.013511   0.207  0.83636     ## basis_splinesX16 -0.015966   0.012134  -1.316  0.18823     ## basis_splinesX17 -0.103226   0.035027  -2.947  0.00321 **  ## basis_splinesX18  0.060249   0.023083   2.610  0.00906 **  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 1.009 on 16362 degrees of freedom ## Multiple R-squared:  0.6751, Adjusted R-squared:  0.6747  ## F-statistic:  1619 on 21 and 16362 DF,  p-value: < 2.2e-16"},{"path":"https://samhero16.github.io/EasyTPRS.561final/articles/user_guide.html","id":"you-can-also-visualize-the-splines-with-visualize_2d_tprs-","dir":"Articles","previous_headings":"Using EasyTPRS","what":"You can also visualize the splines with visualize_2D_TPRS().","title":"User Guide","text":"","code":"visualize_2D_TPRS(tprs_obj = tprs_obj)"},{"path":"https://samhero16.github.io/EasyTPRS.561final/articles/user_guide.html","id":"also-as-a-bonus-you-can-create-a-gaussian-process-with-simulate_gp-a-wrapper-for-the-spectralgp-package","dir":"Articles","previous_headings":"Using EasyTPRS","what":"Also as a bonus, you can create a Gaussian process with simulate_gp, a wrapper for the spectralGP package:","title":"User Guide","text":"","code":"simulate_gp(128, spectral_density = .5, plot = T) ## Note that the spatial range parameter is interpreted based ## on the process living on a (0,1)^d grid ## A Gaussian process object, approximated in the Fourier basis ## Dimension of domain:  2  ## Regular grid of size:  128 by  128  ## Spectral density function of correlation function:  matern.specdens  ## Correlation function (spectral density) parameters:  0.5 2"},{"path":"https://samhero16.github.io/EasyTPRS.561final/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2025). EasyTPRS.561final: Package (Title Case). R package version 0.1.0, https://samhero16.github.io/EasyTPRS.561final/.","code":"@Manual{,   title = {EasyTPRS.561final: What the Package Does (Title Case)},   author = {Who wrote it},   year = {2025},   note = {R package version 0.1.0},   url = {https://samhero16.github.io/EasyTPRS.561final/}, }"},{"path":"https://samhero16.github.io/EasyTPRS.561final/index.html","id":"welcome-to-easytpr","dir":"","previous_headings":"","what":"What the Package Does (Title Case)","title":"What the Package Does (Title Case)","text":"package simplifies making ‘n’ basis Thin Plate Regression Splines. TPRS method reducing unseen spatial confounding. information https://en.wikipedia.org/wiki/Thin_plate_spline. Using packages quite complecated, package wraps easy experience someone less familiar spatial methods.","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"What the Package Does (Title Case)","text":"Generate thin plate regression splines easily Visualize TPRS basis components Simulate Gaussian processes","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/create_n_2D_TPRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Thin Plate Regression spline object. — create_n_2D_TPRS","title":"Create Thin Plate Regression spline object. — create_n_2D_TPRS","text":"Create Thin Plate Regression spline object.","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/create_n_2D_TPRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Thin Plate Regression spline object. — create_n_2D_TPRS","text":"","code":"create_n_2D_TPRS(size, spectral_density = 0.1, n)"},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/create_n_2D_TPRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Thin Plate Regression spline object. — create_n_2D_TPRS","text":"size width height spatial surface. Size TPRS becomes (size x size). makes square TPRS now. spectral_density Spectral density Gaussian process generates TPRS. Defaults 0.1. n Number TPRS generate added regression.","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/create_n_2D_TPRS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Thin Plate Regression spline object. — create_n_2D_TPRS","text":"List TPRS dataframe, omega 1 2 (Fourier frequency values corresponding basis functions expand.grid() format).","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/create_n_2D_TPRS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Thin Plate Regression spline object. — create_n_2D_TPRS","text":"","code":"TPRS = create_n_2D_TPRS(16, .1, 10) #> Note that the spatial range parameter is interpreted based #> on the process living on a (0,1)^d grid"},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/simulate_gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate and (optionally) plot a Gaussian Process — simulate_gp","title":"Simulate and (optionally) plot a Gaussian Process — simulate_gp","text":"Simulate (optionally) plot Gaussian Process","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/simulate_gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate and (optionally) plot a Gaussian Process — simulate_gp","text":"","code":"simulate_gp(size, spectral_density, plot = TRUE)"},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/simulate_gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate and (optionally) plot a Gaussian Process — simulate_gp","text":"size Width/height spatial grid spectral_density Spectral density parameter GP plot Logical; whether plot simulated GP","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/simulate_gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate and (optionally) plot a Gaussian Process — simulate_gp","text":"simulated GP object","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/simulate_gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate and (optionally) plot a Gaussian Process — simulate_gp","text":"","code":"simulate_gp(128, 0.1, plot = TRUE) #> Note that the spatial range parameter is interpreted based #> on the process living on a (0,1)^d grid  #> A Gaussian process object, approximated in the Fourier basis #> Dimension of domain:  2  #> Regular grid of size:  128 by  128  #> Spectral density function of correlation function:  matern.specdens  #> Correlation function (spectral density) parameters:  0.1 2"},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/visualize_2D_TPRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot TPRS — visualize_2D_TPRS","title":"Plot TPRS — visualize_2D_TPRS","text":"Plot TPRS","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/visualize_2D_TPRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot TPRS — visualize_2D_TPRS","text":"","code":"visualize_2D_TPRS(tprs_obj)"},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/visualize_2D_TPRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot TPRS — visualize_2D_TPRS","text":"tprs_obj Object returned create_n_2D_TPRS","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/visualize_2D_TPRS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot TPRS — visualize_2D_TPRS","text":"Nothing. Produces plot TPRS basis components","code":""},{"path":"https://samhero16.github.io/EasyTPRS.561final/reference/visualize_2D_TPRS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot TPRS — visualize_2D_TPRS","text":"","code":"obj = create_n_2D_TPRS(16, .1, 10) #> Note that the spatial range parameter is interpreted based #> on the process living on a (0,1)^d grid visualize_2D_TPRS(obj)"}]
